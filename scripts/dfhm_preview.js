// Generated by CoffeeScript 1.3.3
(function() {
  var doRender, processElevationPixel, processOverlayPixel;

  processElevationPixel = function(brightness) {
    if (brightness < 100) {
      return {
        r: 0,
        g: 0,
        b: brightness
      };
    } else if (brightness < 300) {
      return {
        r: 0,
        g: brightness,
        b: 0
      };
    } else if (brightness <= 255 / ratios.elevation) {
      return {
        r: brightness,
        g: brightness,
        b: brightness
      };
    } else {
      return {
        r: 255,
        g: 255,
        b: 255
      };
    }
  };

  processOverlayPixel = function(overlay, height) {
    return {
      r: height,
      g: height - overlay,
      b: height - overlay
    };
  };

  doRender = function(width, height, srcLength, processor) {
    var canvas, ctx, i, imageData, targetCanvas, targetHeight, targetWidth, _i;
    width = parseInt(width);
    height = parseInt(height);
    canvas = $('<canvas/>')[0];
    canvas.width = width;
    canvas.height = height;
    ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, width, height);
    imageData = ctx.getImageData(0, 0, width, height);
    for (i = _i = 0; 0 <= srcLength ? _i < srcLength : _i > srcLength; i = 0 <= srcLength ? ++_i : --_i) {
      processor(imageData, i);
    }
    ctx.putImageData(imageData, 0, 0);
    targetCanvas = $('#preview')[0];
    targetWidth = targetCanvas.width;
    targetHeight = targetCanvas.height;
    ctx = targetCanvas.getContext('2d');
    ctx.clearRect(0, 0, targetWidth, targetHeight);
    if (width !== height) {
      if (width > height) {
        return ctx.drawImage(canvas, 0, 0, width, height, 0, (targetHeight / 2) - (((targetWidth / width) * height) / 2), targetWidth, (targetWidth / width) * height);
      } else if (height > width) {
        return ctx.drawImage(canvas, 0, 0, width, height, (targetWidth / 2) - (((targetHeight / height) * width) / 2), 0, (targetHeight / height) * width, targetHeight);
      }
    } else {
      return ctx.drawImage(canvas, 0, 0, width, height, 0, 0, targetWidth, targetHeight);
    }
  };

  window.DFHMPreview = {
    renderElevation: function(data, width, height) {
      var processor;
      processor = function(imageData, i) {
        var b, g, r, target, _ref;
        target = i * 4;
        _ref = processElevationPixel(data[i]), r = _ref.r, g = _ref.g, b = _ref.b;
        imageData.data[target] = r;
        imageData.data[target + 1] = g;
        imageData.data[target + 2] = b;
        return imageData.data[target + 3] = 255;
      };
      return doRender(width, height, data.length, processor);
    },
    renderOther: function(data, elevation, width, height) {
      var processor;
      processor = function(imageData, i) {
        var b, g, r, target, _ref;
        target = i * 4;
        _ref = processOverlayPixel(data[i], elevation[i]), r = _ref.r, g = _ref.g, b = _ref.b;
        imageData.data[target] = r;
        imageData.data[target + 1] = g;
        imageData.data[target + 2] = b;
        return imageData.data[target + 3] = 255;
      };
      return doRender(width, height, data.length, processor);
    },
    clear: function() {
      var ctx, targetCanvas, targetHeight, targetWidth;
      targetCanvas = $('#preview')[0];
      targetWidth = targetCanvas.width;
      targetHeight = targetCanvas.height;
      ctx = targetCanvas.getContext('2d');
      return ctx.clearRect(0, 0, targetWidth, targetHeight);
    }
  };

}).call(this);
